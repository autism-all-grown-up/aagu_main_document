}
library(tidyverse)
source('aagu_main_document/print_fte_table.R')
source('aagu_main_document/print_budget_table.R')
data =
read_csv('aagu_main_document/jobs_data.csv')
#| warning: false
#| message: false
#| echo: false
#| output: asis
for (phase in c("seed", "sprout", "grow"))
{
cat(str_glue("## {str_to_title(phase)}\n\n"))
output_format = knitr::opts_knit$get("rmarkdown.pandoc.to")
cat("### Staffing\n")
ft_staffing <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Description) %>%
printFteTable(output_format=output_format)
flextable_to_rmd(ft_staffing)
cat("### Labor Cost\n")
ft_budget <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Rate) %>%
printBudgetTable(output_format=output_format)
flextable_to_rmd(ft_budget)
cat("\n\n")
}
#| warning: false
#| message: false
#| echo: false
#| output: asis
for (phase in c("seed", "sprout", "grow"))
{
cat(str_glue("## {str_to_title(phase)}\n\n"))
output_format = knitr::opts_knit$get("rmarkdown.pandoc.to")
cat("### Staffing\n")
ft_staffing <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Description) %>%
printFteTable(output_format=output_format)
flextable_to_rmd(ft_staffing)
cat("### Labor Cost\n")
ft_budget <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Rate) %>%
printBudgetTable(output_format=output_format)
flextable_to_rmd(ft_budget)
cat("\n\n")
}
data =
read_csv('aagu_main_document/jobs_data.csv') %>%
tibble()
data
#| warning: false
#| message: false
#| echo: false
#| output: asis
for (phase in c("seed", "sprout", "grow"))
{
cat(str_glue("## {str_to_title(phase)}\n\n"))
output_format = knitr::opts_knit$get("rmarkdown.pandoc.to")
cat("### Staffing\n")
ft_staffing <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Description) %>%
printFteTable(output_format=output_format)
flextable_to_rmd(ft_staffing)
cat("### Labor Cost\n")
ft_budget <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Rate) %>%
printBudgetTable(output_format=output_format)
flextable_to_rmd(ft_budget)
cat("\n\n")
}
library(tidyverse)
source('aagu_main_document/print_fte_table.R')
source('aagu_main_document/print_budget_table.R')
data =
read_csv('aagu_main_document/jobs_data.csv') %>%
tibble()
#| warning: false
#| message: false
#| echo: false
#| output: asis
for (phase in c("seed", "sprout", "grow"))
{
cat(str_glue("## {str_to_title(phase)}\n\n"))
output_format = knitr::opts_knit$get("rmarkdown.pandoc.to")
cat("### Staffing\n")
ft_staffing <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Description) %>%
printFteTable(output_format=output_format)
flextable_to_rmd(ft_staffing)
cat("### Labor Cost\n")
ft_budget <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Rate) %>%
printBudgetTable(output_format=output_format)
flextable_to_rmd(ft_budget)
cat("\n\n")
}
flextable_to_rmd(ft_staffing) %>% print()
#| warning: false
#| message: false
#| echo: false
#| output: asis
for (phase in c("seed", "sprout", "grow"))
{
cat(str_glue("## {str_to_title(phase)}\n\n"))
output_format = knitr::opts_knit$get("rmarkdown.pandoc.to")
cat("### Staffing\n")
ft_staffing <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Description) %>%
printFteTable(output_format=output_format)
flextable_to_rmd(ft_staffing)
cat("### Labor Cost\n")
ft_budget <-
data %>%
filter(Phase == "sprout") %>%
arrange(FTE) %>%
select(Responsibility, FTE, Rate) %>%
printBudgetTable(output_format=output_format)
flextable_to_rmd(ft_budget)
cat("\n\n")
}
source("print_glossary.R")  # Assuming your function is saved in glossary_functions.R
source("print_glossary_table.R")  # Assuming your function is saved in glossary_functions.R
?fp_border
?colformat_date
remotes::install_github("https://github.com/atusy/ftExtra")
remotes::install_github("https://github.com/atusy/ftExtra/commit/728be8b39bf71167cd66e28d3cb6e4c90986d20c")
remotes::install_github("https://github.com/atusy/ftExtra/commit/c47e6e2b41caa671e2343ee441074aa3bfe08191")
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/print_glossary_table.R", echo=TRUE)
# Load necessary libraries
library(tidyverse)
library(flextable)
source("print_glossary_table.R")  # Assuming your function is saved in glossary_functions.R
# Read the glossary CSV file
glossary <- read_csv("glossary.csv")
# Print the glossary table for HTML
# Detect output format
output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
printGlossary(glossary, output_format)
# Load necessary libraries
library(tidyverse)
library(flextable)
source("print_glossary_table.R")  # Assuming your function is saved in glossary_functions.R
# Read the glossary CSV file
glossary <- read_csv("glossary.csv")
# Print the glossary table for HTML
# Detect output format
output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
printGlossary(glossary, output_format)
# Load necessary libraries
library(tidyverse)
library(flextable)
source("print_glossary_table.R")  # Assuming your function is saved in glossary_functions.R
# Read the glossary CSV file
glossary <- read_csv("glossary.csv")
# Print the glossary table for HTML
# Detect output format
output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
printGlossary(glossary, output_format)
# Print the glossary table for PDF
output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
printGlossary(glossary, output_format)
# Print the glossary table for DOCX
output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
printGlossary(glossary, output_format)
library(tidyverse)
glossary <- read_csv("glossary.csv")
colnames(glossary)
str_glue_data(glossary, "{Term}\n:{Definition}"))
str_glue_data(glossary, "{Term}\n:{Definition}")
cat("bird\n")
cat(": A flying animal. https://quarto.org\n\n")
cat("cat\n")
cat(": Eats birds.")
library(tidyverse)
df = data.frame(
term = c("bird", "cat"),
definition = c("A flying animal. https://quarto.org", "Eats birds.")
)
df %>% str_glue_data("{term}\n: {definition}\n\n\n") %>% cat()
# Function to get the title of a web page
get_page_title <- function(url) {
tryCatch({
webpage <- read_html(url)
page_title <- webpage %>%
html_node("title") %>%
html_text()
return(page_title)
}, error = function(e) {
return(url)  # Return the URL itself if there's an error
})
}
# Function to replace URLs with markdown links
replace_urls_with_md <- function(text) {
# Find all URLs in the text
urls <- str_extract_all(text, "https?://[\\w\\.-/]+")[[1]]
# Replace each URL with markdown link [title](url)
for (url in urls) {
title <- get_page_title(url)
md_link <- sprintf("[%s](%s)", title, url)
text <- str_replace_all(text, fixed(url), md_link)
}
return(text)
}
# Example usage
text <- "Check out this website: https://example.com. It's really cool!"
new_text <- replace_urls_with_md(text)
print(new_text)
glossary = glossary %>% mutate(Definition = replace_urls_with_md(Definition))
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
glossary =
glossary %>%
mutate(Definition = replace_urls_with_md(Definition))
View(glossary)
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
glossary =
glossary %>%
mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
mutate(Definition = replace_urls_with_md(Definition))
glossary
glossary$Definition
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
library(tidyverse)
source("utilities.R")
glossary = read_csv("glossary.csv")
glossary =
glossary %>%
rowwise() %>% mutate(Definition = replace_urls_with_md(Definition))
glossary %>% str_glue_data("{Term}\n: {Definition}\n\n\n")
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/utilities.R", echo=TRUE)
# Example usage
text <- "Check out this website: https://google.com. It's really cool! Another one is https://quarto.com."
new_text <- replace_urls_with_md(text)
print(new_text)
# Example usage
text <- "Check out this website: https://quarto.com."
new_text <- replace_urls_with_md(text)
print(new_text)
get_page_title("https://quarto.com")
url = "https://quarto.com"
url
webpage <- read_html(url)
library(rvest)
webpage <- read_html(url)
page_title <- webpage %>%
html_node("title") %>%
html_text()
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/utilities.R", echo=TRUE)
# Example usage
text <- "Check out this website: https://www.dol.gov/sites/dolgov/files/OWCP/energy/regs/compliance/Outreach/Outreach_Presentation/lmn_mba06222022.pdf."
get_page_title("https://quarto.com")
get_page_title("https://www.dol.gov/sites/dolgov/files/OWCP/energy/regs/compliance/Outreach/Outreach_Presentation/lmn_mba06222022.pdf")
write_csv(glossary, "glossary.csv")
library(tidyverse)
library(kableExtra)
library(openxlsx)
library(flextable)
source("utilities.R")
funders_file = "Funders.xlsx"
# Get the sheet names
headings = getSheetNames(funders_file)
for (heading in headings) {
cat("\n\n##", heading, "\n\n")
data = read.xlsx(funders_file, sheet = heading) %>%
mutate(Links = replace_urls_with_md(Links))
data %>% flextable()
# data %>%
#   kable(caption = heading) %>%
#   kable_styling("striped", full_width = F) %>%
#   print()
}
library(tidyverse)
library(kableExtra)
library(openxlsx)
library(flextable)
source("utilities.R")
funders_file = "Funders.xlsx"
# Get the sheet names
headings = getSheetNames(funders_file)
headings
heading = "Healthcare"
data = read.xlsx(funders_file, sheet = heading) %>%
mutate(Links = replace_urls_with_md(Links))
View(data)
?unique
?sort
a = "A"
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% filter(s==!!a)
data %>% group_by(Organization, Product) %>% str_glue("{Poduct}: {Links}")
data %>% str_glue("{Poduct}: {Links}")
data %>% {str_glue("{Poduct}: {Links}")}
data %>% {str_glue("{Product}: {Links}")}
data %>% group_by(Organization, Product) %>% {str_glue("{Poduct}: {Links}")}
data %>% group_by(Organization, Product) %>% {str_glue("{Product}: {Links}")}
data %>% {str_glue("{Product}: {Links}")}
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% str_glue_data("{s}:{l}")
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% group_by(s) %>% str_glue_data("{s}:{l}")
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% group_by(s) %>% {str_glue_data("{s}:{l}")}
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% group_by(s) %>% {str_glue("{s}:{l}")}
data.frame(s=c("A", "B", "A", "C"), l=1:4) %>% group_by(s) %>% {str_glue("{.$s}:{.$l}")}
data
colnames(data)
data %>% str_glue_data("{Organization} {Product} {Links}")
data %>% filter(Organization=="OHSU") %>% str_glue_data("{Organization} {Product} {Links}")
data %>% filter(Organization=="OHSU") %>% str_glue_data("{Product} {Links}")
library(tidyverse)
library(kableExtra)
library(openxlsx)
library(flextable)
source("utilities.R")
funders_file = "Funders.xlsx"
# Get the sheet names
headings = getSheetNames(funders_file)
for (heading in headings) {
cat("\n\n##", heading, "\n\n")
data = read.xlsx(funders_file, sheet = heading)
orgs =
data$Organization %>%
unique() %>%
sort()
for (org in orgs)
{
cat("\n\n###", org, "\n\n")
data %>%
filter(Organization == !!org) %>%
str_glue_data("- [{Product}]({Links})")
}
for (heading in headings) {
cat("\n\n##", heading, "\n\n")
data = read.xlsx(funders_file, sheet = heading)
orgs =
data$Organization %>%
unique() %>%
sort()
for (org in orgs)
{
cat("\n\n###", org, "\n\n")
data %>%
filter(Organization == !!org) %>%
str_glue_data("- [{Product}]({Links})") %>%
cat()
}
library(tidyverse)
library(kableExtra)
library(openxlsx)
library(flextable)
source("utilities.R")
funders_file = "Funders.xlsx"
# Get the sheet names
headings = getSheetNames(funders_file)
for (heading in headings) {
cat("\n\n##", heading, "\n\n")
data = read.xlsx(funders_file, sheet = heading)
entities =
data$Entity %>%
unique() %>%
sort()
for (entity in entities)
{
cat("\n\n###", entity, "\n\n")
data %>%
filter(Entity == !!entity) %>%
str_glue_data("- [{Product}]({Links})") %>%
cat()
}
library(tidyverse)
library(kableExtra)
library(openxlsx)
library(flextable)
source("utilities.R")
funders_file = "Funders.xlsx"
# Get the sheet names
headings = getSheetNames(funders_file)
for (heading in headings) {
cat("\n\n##", heading, "\n\n")
data = read.xlsx(funders_file, sheet = heading)
entities =
data$Entity %>%
unique() %>%
sort()
for (entity in entities)
{
cat("\n\n###", entity, "\n\n")
data %>%
filter(Entity == !!entity) %>%
str_glue_data("- [{Product}]({Links})") %>%
cat()
}
url <- "https://www.ziprecruiter.com/Salaries/Data-Analyst-Salary-in-Portland,OR#TableView"
library(rvest)
page <- read_html(url)
page = read_html("https://www.ziprecruiter.com/Salaries/Data-Analyst-Salary-in-Portland,OR#TableView")
page = read_html("https://www.ziprecruiter.com/Salaries/Data-Analyst-Salary-in-Portland,OR")
library(httr)
# URL of the page to scrape
url <- "https://www.ziprecruiter.com/Salaries/Data-Analyst-Salary-in-Portland,OR#TableView"
# Set a custom user-agent
headers <- httr::add_headers('User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
# Read the HTML content of the page with custom user-agent
page <- read_html(httr::GET(url, headers))
# URL of the page to scrape
url <- "https://www.ziprecruiter.com/Salaries/Data-Analyst-Salary-in-Portland,OR#TableView"
# Set a custom user-agent
headers <- httr::add_headers('User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
# Read the HTML content of the page with custom user-agent
page <- read_html(httr::GET(url, headers))
url
headers
read_html(httr::GET(url, headers))
library(RSelenium)
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/ziprecruiter_test.R", echo=TRUE)
install.packages("jsonlite")
install.packages("httr")
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/ziprecruiter_test.R", echo=TRUE)
# Your ZipRecruiter API key
api_key <- "e3ataxfnpynn4zhrtjinwkxi2s4sweg7"
# Job titles and location
job_titles <- c("Data Analyst", "Research Associate")
location <- "Portland, OR"
# Fetch salary information for each job title
salary_info <- map_df(job_titles, ~ get_ziprecruiter_salary_info(.x, location, api_key))
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/ziprecruiter_test.R", echo=TRUE)
library(wdman)
library(RSelenium)
selenium <- wdman::selenium(verbose = FALSE)
rlang::last_trace()
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-22/")
selenium <- wdman::selenium(verbose = FALSE)
source("//wsl.localhost/Ubuntu/home/balter/aagu_main_document/ziprecruiter_test.R", echo=TRUE)
