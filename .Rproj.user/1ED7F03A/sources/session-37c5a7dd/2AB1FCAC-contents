# Budget {#budget}

```{r, include=F}
library(tidyverse)
library(gt)
source('utilities/format_staffing_table.R')
# source('utilities/format_budget_table.R')

data = 
  read_csv('data/jobs_data.csv') %>% 
  tibble()
```

Autism All Grown Up will place a strong emphasis on hiring autistic and neurodiverse Oregon adults and paying them a market wage. The wages will be at the low end during the initial Seed and Sprout phases and increase during the later phases. The hourly rates shown represent full compensation on a 1099 and do not include benefits. We will make necessary adjustments when we are able to provide benefits as well.

We have created our budget estimate based on the minimum staffing we believe can meet our performance goals combined with market-rate salary estimates from [ZipRecruiter](https://www.ziprecruiter.com/Salaries) for approximate job titles in the Portland, OR area (see @sec-representative-salaries). We project a budget of approximately \$150,000 for the first six months (26 weeks) of operation.



```{r}
#| include: true
#| warning: false
#| message: false
#| echo: false
#| output: asis

data = 
  read_csv('data/jobs_data.csv') %>% 
  tibble()

for (phase in c("seed", "sprout", "grow")) {
  cat(str_glue("## {str_to_title(phase)}\n\n"))
  
  output_format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
  output_format <- ifelse(is.null(output_format), "normal", output_format)  
  
  cat("### Staffing\n")
  staffing <- data %>%
    filter(Phase == !!phase) %>%
    arrange(FTE) %>%
    select(Responsibility, FTE, Description) %>%
    formatStaffingTable()
  
  if (output_format == "html") {
    cat(as_raw_html(staffing))
  } else if (output_format == "latex") {
    cat(as_latex(staffing))
  } else{
    print(staffing)
  }
  # 
  # cat("### Labor Cost\n")
  # budget <- data %>%
  #   filter(Phase == !!phase) %>%
  #   arrange(FTE) %>%
  #   select(Responsibility, FTE, Rate)
  # 
  # # Print intermediate result to check data
  # print(budget)
  # 
  # cat(formatBudgetTable(budget, output_format))
  # 
  cat("\n\n")
}
```

